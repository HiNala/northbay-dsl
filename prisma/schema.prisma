// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ---------- SIMPLIFIED AUTH ----------
model Profile {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @unique @db.Uuid
  fullName  String?
  phone     String?
  avatarUrl String?
  address   Json?     // Flexible address structure
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
}

model Role {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique  // 'super_admin', 'admin', 'employee', 'customer', 'designer', 'installer'
  displayName String    // Human-readable name
  level       Int       @default(0) // 0=customer, 50=employee, 80=admin, 100=super_admin
  permissions String[]  // Array of permission strings like ['products.manage', 'orders.view']
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  Users       UserRole[]
  
  @@map("roles")
}

model UserRole {
  userId     String    @db.Uuid
  roleId     String    @db.Uuid
  assignedAt DateTime @default(now())
  expiresAt  DateTime? // Optional expiration

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model User {
  id        String    @id @db.Uuid
  email     String?   @unique
  roles     UserRole[]
  Profile   Profile?
  Wishlists Wishlist[]
  Carts     Cart[]
  Orders    Order[]
  DesignLeads DesignLead[]
  BlogPosts BlogPost[]
  AuditLogs AuditLog[]
  
  @@map("users")
}

/// ---------- FLEXIBLE PRODUCT CATALOG ----------
model Brand {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  slug        String    @unique
  logoUrl     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  Products Product[]
  
  @@map("brands")
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  parentId    String?   @db.Uuid // Nested categories
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  Parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  Children    Category[]  @relation("CategoryHierarchy")
  Products    Product[]
  
  @@map("categories")
}

model Finish {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  slug        String    @unique
  hexColor    String?   // Color swatch
  imageUrl    String?   // Texture sample
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())

  Products ProductFinish[]
  CartItems CartItem[]
  OrderItems OrderItem[]
  
  @@map("finishes")
}

model Product {
  id              String    @id @default(uuid()) @db.Uuid
  name            String
  slug            String    @unique
  sku             String?   @unique
  description     String?
  specifications  Json?     // Flexible specs object
  price           Decimal?  @db.Decimal(10,2)
  comparePrice    Decimal?  @db.Decimal(10,2) // MSRP
  inStock         Boolean   @default(true)
  stockQuantity   Int?      @default(0)
  trackInventory  Boolean   @default(false)
  status          String    @default("draft") // 'draft', 'active', 'archived'
  type            String    @default("physical") // 'physical', 'service', 'digital'
  tags            String[]  // Flexible tagging
  seoTitle        String?
  seoDescription  String?
  
  // Relationships
  categoryId      String?   @db.Uuid
  brandId         String?   @db.Uuid
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  Category        Category?      @relation(fields: [categoryId], references: [id])
  Brand           Brand?         @relation(fields: [brandId], references: [id])
  Images          ProductImage[]
  Finishes        ProductFinish[]
  Variants        ProductVariant[]
  ProjectLinks    ProjectProduct[]
  WishlistItems   WishlistItem[]
  CartItems       CartItem[]
  OrderItems      OrderItem[]
  
  @@map("products")
}

model ProductVariant {
  id          String    @id @default(uuid()) @db.Uuid
  productId   String    @db.Uuid
  name        String    // e.g., "24-inch Chrome"
  sku         String?   @unique
  price       Decimal?  @db.Decimal(10,2)
  stockQuantity Int?    @default(0)
  options     Json      // Size, color, etc. as flexible JSON
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())

  Product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_variants")
}

model ProductImage {
  id          String    @id @default(uuid()) @db.Uuid
  url         String
  alt         String?
  position    Int       @default(0)
  isHero      Boolean   @default(false)
  productId   String    @db.Uuid
  createdAt   DateTime  @default(now())

  Product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model ProductFinish {
  productId   String    @db.Uuid
  finishId    String    @db.Uuid
  upcharge    Decimal? @db.Decimal(8,2)
  isDefault   Boolean  @default(false)

  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  Finish  Finish  @relation(fields: [finishId], references: [id], onDelete: Cascade)

  @@id([productId, finishId])
  @@map("product_finishes")
}

/// ---------- PROJECTS ----------
model Project {
  id            String    @id @default(uuid()) @db.Uuid
  title         String
  slug          String    @unique
  description   String?
  location      String?
  clientName    String?
  heroImage     String?
  status        String    @default("active") // 'planning', 'active', 'completed', 'archived'
  category      String?   // 'kitchen', 'bathroom', 'whole-home'
  budget        Decimal?  @db.Decimal(12,2)
  completedAt   DateTime?
  isPublic      Boolean   @default(true)
  isFeatured    Boolean   @default(false)
  tags          String[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  Images        ProjectImage[]
  Products      ProjectProduct[]
  
  @@map("projects")
}

model ProjectImage {
  id          String    @id @default(uuid()) @db.Uuid
  url         String
  alt         String?
  position    Int       @default(0)
  isHero      Boolean   @default(false)
  room        String?   // 'kitchen', 'master-bath'
  beforeAfter String?   // 'before', 'after'
  projectId   String    @db.Uuid
  createdAt   DateTime  @default(now())

  Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_images")
}

model ProjectProduct {
  projectId   String    @db.Uuid
  productId   String    @db.Uuid
  quantity    Int       @default(1)
  notes       String?
  createdAt   DateTime  @default(now())

  Project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([projectId, productId])
  @@map("project_products")
}

/// ---------- DESIGN LEADS ----------
model DesignLead {
  id          String    @id @default(uuid()) @db.Uuid
  fullName    String
  email       String
  phone       String?
  address     Json?
  projectType String?   // 'kitchen', 'bathroom', 'whole-home'
  style       String?   // 'modern', 'traditional', 'transitional'
  budgetMin   Int?
  budgetMax   Int?
  timeline    String?   // 'ASAP', '1-3 months', '3-6 months'
  message     String?
  status      String    @default("new") // 'new', 'contacted', 'qualified', 'proposal', 'won', 'lost'
  priority    String    @default("medium") // 'low', 'medium', 'high'
  source      String?   // 'website', 'google', 'referral', 'social'
  notes       String?   // Internal notes
  assignedTo  String?   @db.Uuid
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  followUpAt  DateTime?

  AssignedTo  User?     @relation(fields: [assignedTo], references: [id])
  
  @@map("design_leads")
}

/// ---------- E-COMMERCE ----------
model Wishlist {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  name      String    @default("My Wishlist")
  isPublic  Boolean   @default(false)
  createdAt DateTime  @default(now())

  User      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Items     WishlistItem[]
  
  @@map("wishlists")
}

model WishlistItem {
  id         String    @id @default(uuid()) @db.Uuid
  wishlistId String    @db.Uuid
  productId  String    @db.Uuid
  addedAt    DateTime  @default(now())

  Wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  Product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([wishlistId, productId])
  @@map("wishlist_items")
}

model Cart {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String?    @db.Uuid // Null for guest carts
  sessionId   String?    // Guest tracking
  status      String     @default("active") // 'active', 'converted', 'abandoned'
  notes       String?    // Special instructions
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  expiresAt   DateTime?  // Guest cart expiration
  
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Items       CartItem[]
  
  @@map("carts")
}

model CartItem {
  id          String    @id @default(uuid()) @db.Uuid
  cartId      String    @db.Uuid
  productId   String    @db.Uuid
  variantId   String?   @db.Uuid // If product has variants
  finishId    String?   @db.Uuid
  quantity    Int       @default(1)
  price       Decimal   @db.Decimal(10,2) // Price when added
  customizations Json?  // Custom options
  addedAt     DateTime  @default(now())

  Cart    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Product Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  Finish  Finish?  @relation(fields: [finishId], references: [id])
  
  @@map("cart_items")
}

model Order {
  id              String    @id @default(uuid()) @db.Uuid
  orderNumber     String    @unique // Human-readable order number
  userId          String?   @db.Uuid
  guestEmail      String?   // For guest orders
  status          String    @default("pending") // 'pending', 'paid', 'processing', 'shipped', 'delivered', 'cancelled'
  paymentStatus   String    @default("pending") // 'pending', 'paid', 'failed', 'refunded'
  
  // Pricing
  subtotal        Decimal   @db.Decimal(12,2)
  taxAmount       Decimal   @db.Decimal(10,2)
  shippingAmount  Decimal   @db.Decimal(10,2)
  discountAmount  Decimal   @default(0) @db.Decimal(10,2)
  total           Decimal   @db.Decimal(12,2)
  
  // Addresses (flexible JSON)
  billingAddress  Json?
  shippingAddress Json?
  
  // Payment & Fulfillment
  stripePaymentIntentId String? @unique
  paymentMethod   String?   // 'card', 'paypal', 'bank_transfer'
  shippingMethod  String?   // 'standard', 'express', 'pickup'
  trackingNumber  String?
  
  // Notes
  customerNotes   String?
  internalNotes   String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  shippedAt       DateTime?
  deliveredAt     DateTime?
  
  User            User?     @relation(fields: [userId], references: [id])
  Items           OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id              String    @id @default(uuid()) @db.Uuid
  orderId         String    @db.Uuid
  productId       String    @db.Uuid
  variantId       String?   @db.Uuid
  finishId        String?   @db.Uuid
  quantity        Int
  price           Decimal   @db.Decimal(10,2) // Price per unit at order time
  customizations  Json?     // Product customizations
  
  Order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product Product  @relation(fields: [productId], references: [id])
  Finish  Finish?  @relation(fields: [finishId], references: [id])
  
  @@map("order_items")
}

/// ---------- SIMPLIFIED CMS ----------
model BlogPost {
  id            String    @id @default(uuid()) @db.Uuid
  slug          String    @unique
  title         String
  excerpt       String?
  content       Json      // Rich text content
  featuredImage String?
  category      String?   // Simple string category
  tags          String[]  // Array of tag strings
  authorId      String?   @db.Uuid
  isPublished   Boolean   @default(false)
  publishedAt   DateTime?
  viewCount     Int       @default(0)
  seoTitle      String?
  seoDescription String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  Author        User?     @relation(fields: [authorId], references: [id])
  
  @@map("blog_posts")
}

model Page {
  id        String    @id @default(uuid()) @db.Uuid
  slug      String    @unique
  title     String
  content   Json      // Rich text content
  template  String?   // Page template name
  isPublished Boolean @default(false)
  seoTitle  String?
  seoDescription String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@map("pages")
}

model SiteSetting {
  key       String    @id // 'site_name', 'logo_url', 'contact_email', etc.
  value     Json      // Flexible value storage
  updatedAt DateTime  @updatedAt
  
  @@map("site_settings")
}

/// ---------- ANALYTICS & AUDIT ----------
model Event {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String?   @db.Uuid
  sessionId String?   // For tracking anonymous users
  type      String    // 'page_view', 'product_view', 'add_to_cart', etc.
  data      Json      // Event-specific data
  url       String?   // Page URL where event occurred
  userAgent String?   // Browser info
  ipAddress String?   // User IP (anonymized)
  createdAt DateTime  @default(now())
  
  @@index([type, createdAt])
  @@map("events")
}

model AuditLog {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String?   @db.Uuid
  action    String    // 'create', 'update', 'delete'
  tableName String    // Which table was affected
  recordId  String    // ID of the affected record
  oldValues Json?     // Previous values
  newValues Json?     // New values
  createdAt DateTime  @default(now())
  
  User      User?     @relation(fields: [userId], references: [id])
  
  @@index([tableName, recordId])
  @@index([userId, createdAt])
  @@map("audit_logs")
} 